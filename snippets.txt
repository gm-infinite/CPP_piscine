{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],Fixed::
	// 	"description": "Log output to console"
	// }
  
  "42 header with timestamps fixed width": {
    "prefix": "headerkzy",
    "body": [
      "/* ************************************************************************** */",
      "/*                                                                            */",
      "/*   ${TM_FILENAME/(.{44}).*/$1/}                                    ██╗  ██╗██████╗ ██╗   ██╗   */",
      "/*                                                ██║ ██╔╝██╔══██╗╚██╗ ██╔╝   */",
      "/*   By: kuzyilma <kuzeyilma@gmail.com>           █████╔╝ ██████╔╝ ╚████╔╝    */",
      "/*                                                ██╔═██╗ ██╔══██╗  ╚██╔╝     */",
      "/*   Created: ${CURRENT_YEAR}/${CURRENT_MONTH}/${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} by kuzyilma     ██║  ██╗██████╔╝   ██║      */",
      "/*                                                ╚═╝  ╚═╝╚═════╝    ╚═╝      */",
      "/*                                                                            */",
      "/* ************************************************************************** */",
      "",
      ""
    ],
    "description": "42 header with filename and timestamps padded manually"
  },

   "Uppercase test": {
    "prefix": "upcase",
    "body": [
      "Uppercase filename base: ${TM_FILENAME_BASE:/upcase}"
    ],
    "description": "Test uppercase filename base"
  },
  
	"C++ Header Class Template": {
    "prefix": "class.hpp",
    "body": [
      "",
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
      "",
      "class ${TM_FILENAME_BASE} {",
      "",
      "public:",
      "    ${TM_FILENAME_BASE}(void);",
      "    ~${TM_FILENAME_BASE}(void);",
      "    ${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& other);",
      "    ${TM_FILENAME_BASE}& operator=(const ${TM_FILENAME_BASE}& other);",
      "",
      "private:",
      "",
      "};",
      "",
      "#endif /* ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP */"
    ],
    "description": "C++ header file with class and guards"
  },

  	"C++ Header Class Cpp File Template": {
    "prefix": "class.cpp",
    "body": [
      "",
      "#include \"${TM_FILENAME_BASE}.hpp\"",
      "",
      "/* ┌──────────────────┐ */",
	    "/* │   COSNTRUCTORS   │ */",
	    "/* └──────────────────┘ */",
      "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(void)",
      "{ }",
      "",
	  "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& other)",
	  "{ }",
	  "",
	  "/* ┌───────────────────┐ */",
	  "/* │   DECOSNTRUCTOR   │ */",
	  "/* └───────────────────┘ */",
	  "",
      "${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}(void)",
      "{ }",
	  "",
	  "/* ┌───────────────┐ */",
	  "/* │   OVERLOADS   │ */",
	  "/* └───────────────┘ */",
	  "",
      "${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE}& other)",
      "{ }",
      "",
      "/* ┌──────────────────────┐ */",
      "/* │   MEMBER FUNCTIONS   │ */",
      "/* └──────────────────────┘ */",
      ""
    ],
    "description": "C++ cpp file for header files with default constructor, copy constructor =overload and deconstructor"
  },

  "Class Method Definition cpp": {
    "prefix": "funcdefcpp",
    "body": [
      "${1:void} ${TM_FILENAME_BASE}::${2:functionName}(${3:params})",
	  "{",
      "    $0",
      "}"
    ],
    "description": "Defines a member function with class scope"
  },

  "Class Method Definition hpp": {
    "prefix": "funcdefhpp",
    "body": [
      "${1:void} ${2:functionName}(${3:params});",
      ""
    ],
    "description": "class member template"
  },

  "Getter and Setter from selection": {
  "prefix": "getsethpp",
  "body": [
    "${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1 get${2}(void) const;/}",
    "${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/void set${2}(const $1 $2);/}"
  ],
  "description": "Generate getter and setter using selected 'type name' split by space"
  },

  "Getter and Setter Implementation (cpp)": {
  "prefix": "getsetcpp",
  "body": [
    "${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/} ${TM_FILENAME_BASE}::get${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/}(void) const {",
    "    return this->${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/};",
    "}",
    "",
    "void ${TM_FILENAME_BASE}::set${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/}(const ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/} ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/}) {",
    "    this->${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/} = ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/};",
    "}"
  ],
  "description": "Generate getter and setter implementation"
  },
  
  "Const Ref Getter and Setter Declaration (hpp)": {
  "prefix": "crgetsethpp",
  "body": [
    "const ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/}& get${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/${2:/capitalize}/}(void) const;",
    "void set${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/${2:/capitalize}/}(const ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/}& ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/});"
  ],
  "description": "Const reference getter and setter declarations"
  },

  "Const Ref Getter and Setter Implementation (cpp)": {
  "prefix": "crgetsetcpp",
  "body": [
    "const ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/}& ${TM_FILENAME_BASE}::get${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/${2:/capitalize}/}(void) const {",
    "    return this->${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/};",
    "}",
    "",
    "void ${TM_FILENAME_BASE}::set${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/${2:/capitalize}/}(const ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$1/}& ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/}) {",
    "    this->${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/} = ${TM_SELECTED_TEXT/(\\S+)\\s+(\\w+)/$2/};",
    "}"
  ],
  "description": "Const reference getter and setter implementation"
  }

}
